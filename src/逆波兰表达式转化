---
layout: post
title: 逆波兰表达式转化
slug: my-first-awesome-post
date: 2019-12-17 20:34
status: publish
author: 于金垒
categories: 
  - 默认分类
tags: 
  - 博客
  - GitHub
excerpt: Hello World!
---

**2084Team系列教程** :@(深思) ——Yu
**什么是逆波兰表达式**
***把运算符写在操作数之前，称为波兰表达式(Polish Expression)或前缀表达式(Prefix Expression)，如+AB；把运算符写在操作数之后，称为逆波兰表达式(Reverse Polish Expression)或后缀表达式(Suffix Expression)，如AB+***
（1）一般算术表达（中缀表达），如#3*(4+2)/2-5#，#为表达式界定符，逆波兰
表达式（后缀表达式），如前述表达的后缀表达式为：3 4 2 + * 2 / 5 -。
（2）设中缀表达式的运算符有+、-、*、/、#五种，运算符的优先级别从高到低为()、*、/、+、-、#；有
括号先算括号内，再算括号外的，多层括号由内向外进行。
（3）中缀表达式转换为后缀表达式需要用到一个临时栈 optr 暂存运算符。
**如何人工转化将一个中缀表达式转化为逆波兰表达式**
假设有一个中缀表达式a+b*c-(d+e)：
1.首先将这个中缀表达式的所有运算加括号((a+(b*c))-(d+e))
2.然后将所有运算符放到括号后面，这样就变成了((a(bc)* )+ (de)+ )-
3.把所有括号去掉abc*+de+-，最后得出的结果就是后缀表达式。
**逆波兰表达式的好处是什么？ :@(想一想) **
1.不需要两次操作，只要从头扫描到尾就能求出结果，也不需要递归，只需要一个很小的栈就可以。所以逆波兰表达式算法取得了时间复杂度和空间复杂度上的双重优势。
2.从左到右扫描，有运算符就运算，对于复杂的表达式，不容易出错；
3.栈可以自动的记录中间结果；
4.机器只需要维护一个操作数堆栈，栈中只有操作数和结果
5.前后缀表达式的出现是为了方便计算机处理，它的运算符是按照一定的顺序出现，所以求值过程中并不需要使用括号来指定运算顺序，也不需要考虑运算符号（比如加减乘除）的优先级。
**（无视括号和优先级！！ :@(愤怒) ）**
    OpendType EvaluateExpression( )
    {
	    InitStack( OPTR );
	    Push( OPTR, ‘#’ );
	    InitStack( OPND );
	    c = getchar( );
	    while( !(c == ‘#’ && GetTop( OPTR ) == ‘#’) )
	    {
		    if( ! In( c, OP ))	// c 是运算符？,OP是运算符集合
		    {
			    Push( OPND, c);
			    c = getchar( );
		    }
    else
		    {
			    switch( Precede ( GetTop( OPTR), c ))
			    {
				    case ‘<’ :     //栈顶元素优先权低
					    Push( OPTR, c );
					    c = getchar( );
					    break;
				    case ‘=‘ :	// c为’)’
					    Pop( OPTR, x );
					    c = getchar( );
					    break;
			            case ‘>’:  //退栈并将运算结果入栈
				            Pop( OPTR, t );
				            Pop( OPND, b );
				            Pop( OPND, a );
				            Push( OPND, Operate( a, t, b ));
				            break;
			         }// switch
	
	         }// while
	         return  GetTop( OPND );
	        }// EvaluateExpression
                                     中缀表达式

![逆波兰表达式实现原理][1]


![中缀表达式转化为逆波兰表达式算法解释][2]


  [1]: http://www.cxyxiaowu.com/wp-content/uploads/2019/10/1571058404-c0ee4f9f6db92d1.gif#vwid=969&vhei=544
  [2]: https://shupingsheng.top/okl.png#vwid=953&vhei=467
**中缀式转化为逆波兰式算法具体实现（C语言）**

      char *RPExpression(char *e)
              /* 返回表达式e的逆波兰式 */
      {
          //栈OPTR用于存放运算符，栈RPE用于存放逆波兰式
          SqStack OPTR,RPE;
          InitStack(OPTR);
          InitStack(RPE);    
          
          //假设字符'#'是运算级别最低的运算符，并压入栈OPTR中
         Push(OPTR,'#');
         
         //p指针用于遍历传入的字符串，ch用于临时存放字符,length用于计算字符串长度 
         char *p=e,ch;
         int length=0;
         for(;*p!='\0';p++)//逐个字符访问
         {
             switch(*p)
             {
                 //遇'('则直接入栈OPTR
                 case '(':
                     Push(OPTR,*p);
                     break;
                 //遇')'则将距离栈OPTR栈顶的最近的'('之间的运算符，逐个出栈，依次送入栈RPE,此时抛弃'('
                 case ')':
                     while(GetTop(OPTR)!='('||GetTop(ORTP)=='#')
                     {
                         Pop(OPTR,ch);
                         Push(RPE,ch);
                     }
                     Pop(OPTR,ch);
                     break;
                 //遇下列运算符，则分情况讨论：
                 //1.若当前栈OPTR的栈顶元素是'('，则当前运算符直接压入栈OPTR；
                 //2.否则，将当前运算符与栈OPTR的栈顶元素比较，若优先级较栈顶元素大，则直接压入栈OPTR中,
                 //  否则将OPTR栈顶元素弹出，并压入栈RPE中，直到栈顶运算符的优先级别低于当前运算符，然后再将当前运算 
         符压入栈OPTR中
                 case '+':
                 case '-':
                     for(ch=GetTop(OPTR);ch!='#';ch=GetTop(OPTR))
                     {                
                         if(ch=='(')
                         {                        
                             break;
                         }
                         else
                         {
                             Pop(OPTR,ch);
                            Push(RPE,ch);                        
                         }                                          
                     }
                     Push(RPE,*p);
                     length++;
                     break;
                 case '*':
                 case '/':
                     for(ch=Top(OPTR);ch!='#'&&ch!='+'&&ch!='-';ch=Top(OPTR))
                     {                
                         if(ch=='(')
                         {                        
                             break;
                         }
                         else
                         {
                             Pop(OPTR,ch);
                             Push(RPE,ch);
                         }                                          
                     }
                     Push(OPTR,*p);
                     length++;
                     break;
                 //遇操作数则直接压入栈RPE中
                 default:
                     Push(RPE,*p);   
                     length++;             
             }
         }    
         //若栈OPTR非空，则将栈中元素依次弹出并压入栈RPE中
          while(!StackEmpty(OPTR)&&Top(OPTR)!='#')
         {
             Pop(OPTR,ch);
             Push(RPE,ch);        
         }
         //最后将栈RPE输出，逆序排列成字符串;
         char *result;
         result=(char *)malloc(sizeof(char)*(length+1));
         result+=length;
         *result='\0';
         result--;
         for(;!StackEmpty(RPE);result--)
         {
             Pop(RPE,ch);
             *result=ch;        
         }
         ++result;
         return result;
     }

**逆波兰表达式求值算法解释**
维护一个结果栈S3，该栈最后存放的是表达式的值。从左至右的遍历栈S1（直接使用上算法返回的指针，未独立建立s1）

（1）如果遇到的是数字，直接将数字压入到S3中

（2）如果遇到的是单目运算符，取S3栈顶的一个元素进行运算之后，将结果压入到栈S3中

（3）如果遇到的是双目运算符，取S3栈顶的两个元素，首先出栈的在左，后出栈的在右进行双目运算符的计算，将结果压入到S3中

遍历完整个栈S1，最后S3中的值就是逆波兰表达式的值。

**逆波兰表达式求值**（未包括错误检查，在输入或者转化正确的前提下求值）

    int RPECalculation(char *e)
    {
    	
    	SqStack OPND;
    	InitStack(OPND);//存放计算对象和结果 
    	char *p = e,ch,
    	int Operator,top1,top2,result;
    	for(;*p!='\0';p++)
    	{
    		Operator = 0;
    		switch(*p)
    		{
    			case '+':
    		    	Operator = 1;
    				break;
    			case '-':
    				Operator = 2;
    				break;
    			case '*':
    				Operator = 3;
    				break;
    			case '/':
    				Operator = 4;
    				break;
                default:
                	ch = *p;
    				Push(OPND,(int)ch);
    				break; 
    		}
    		if(Operator==0);
    		else if(Operator==1||Operator==2||Operator==3||Operator==4)
    		{
    			Pop(OPND,top1);
    			if(GetTop(OPND))
    			{
    				Pop(OPND,top2);
    			}
    		switch(Operator)
    		{   
    		    
    			case 1:
    				result = top1 + top2;
    				break;
    			case 2:
    				result = top2 - top1;//应该逆过来减法和除法 
    				break;
    			case 3:
    				result = top1 * top2;
    				break;
    			case 4:
    				result = top2 / top1;
    				break:
    			default:
    				return ERROR; 
    			}
    		Push(OPND,result);
    }
    } 
      return GetTop(OPND); 
    }
